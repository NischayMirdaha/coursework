@page "/transaction"
@using coursework.Models
@inject TransactionService TransactionService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<section class="min-h-screen bg-gradient-to-br from-blue-900 via-blue-700 to-blue-500 d-flex align-items-center justify-content-center p-4">
    <div class="w-100 max-w-4xl bg-white rounded-xl shadow-lg p-8">
        <!-- Header -->
        <div class="text-center mb-4">
            <h1 class="display-4 fw-bold text-primary">Add Your Transaction</h1>
            <p class="text-secondary fs-6 mt-2">Enter the details below to save a new transaction.</p>
        </div>

        <!-- Form Container -->
        <div class="border rounded bg-light p-4">
            <form @onsubmit="OnSaveTransaction">
                <!-- Form Fields -->
                <!-- Amount -->
                <div class="mb-3">
                    <label class="form-label text-primary">Amount</label>
                    <input type="number" class="form-control" placeholder="Enter amount" @bind="newTransactionAmount" required min="0" step="any">
                </div>

                <!-- Title -->
                <div class="mb-3">
                    <label class="form-label text-primary">Title</label>
                    <input type="text" class="form-control" placeholder="Transaction title" required>
                </div>

                <!-- Transaction Type -->
                <div class="mb-3">
                    <label class="form-label text-primary">Transaction Type</label>
                    <select class="form-select" @bind="newTransactionType" required>
                        <option disabled selected value="">Select Transaction Type</option>
                        <option value="Credit">Credit</option>
                        <option value="Debit">Debit</option>
                    </select>
                </div>

                <!-- Source -->
                <div class="mb-3">
                    <label class="form-label text-primary">Source</label>
                    <select class="form-select" @bind="newTransactionSource">
                        <option disabled selected value="">Select Source</option>
                        <option value="bank">Bank</option>
                        <option value="cash">Cash</option>
                        <option value="online">Online</option>
                        <option value="bonus">Bonus</option>
                        <option value="other">Other</option>
                    </select>
                </div>

                <!-- Tags -->
                <div class="mb-3">
                    <label class="form-label text-primary">Tags</label>
                    <select class="form-select" @bind="newTransactionTags" required>
                        <option disabled selected value="">Select Tags</option>
                        <option value="yearly">Yearly</option>
                        <option value="monthly">Monthly</option>
                        <option value="food">Food</option>
                        <option value="drinks">Drinks</option>
                        <option value="other">Other</option>
                    </select>
                </div>

                <!-- Notes -->
                <div class="mb-3">
                    <label class="form-label text-primary">Notes</label>
                    <textarea class="form-control" rows="3" placeholder="Add any notes" @bind="newTransactionNotes"></textarea>
                </div>

                <!-- Action Buttons -->
                <div class="d-flex justify-content-between align-items-center mt-4">
                    <button type="submit" class="btn btn-primary px-4 py-2 fw-semibold">Save Transaction</button>
                    <button type="button" class="btn btn-danger px-4 py-2 fw-semibold" @onclick="OnCancel">Cancel</button>
                </div>
            </form>
        </div>

        <!-- Success Message -->
        @if (!string.IsNullOrEmpty(Message))
        {
            <div class="mt-4 alert alert-success rounded shadow-sm" role="alert">
                <p class="m-0">@Message</p>
            </div>
        }
    </div>
</section>



@code {
    private decimal newTransactionAmount = 0;
    private string newTransactionType = "";
    private string newTransactionTitle = "";
    private string newTransactionTags = "";
    private string newTransactionSource = "";
    private string newTransactionNotes = "";
    private string Message = "";
    private List<TransactionModel> Transactions = new();

    protected override void OnInitialized()
    {
        var appData = TransactionService.LoadAppData();
        Transactions = appData.Transactions ?? new List<TransactionModel>();
    }

    private async Task OnSaveTransaction()
    {
        var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");
        if (string.IsNullOrEmpty(userId))
        {
            Message = "User ID not found. Please log in.";
            return;
        }

        int parsedUserId = int.Parse(userId);

        if (newTransactionType == "Debit" && !TransactionService.CheckSufficientBalance(parsedUserId, newTransactionAmount))
        {
            Message = "Insufficient balance for this transaction.";
            return;
        }

        var newTransactionId = Transactions.Any() ? Transactions.Max(t => t.Id) + 1 : 1;

        var newTransaction = new TransactionModel
            {
                Id = newTransactionId,
                UserId = parsedUserId,
                Title = newTransactionTitle,
                Amount = newTransactionAmount,
                Type = Enum.TryParse<TransactionModel.TransactionType>(newTransactionType, out var type) ? type : TransactionModel.TransactionType.Credit,
                Tags = string.IsNullOrWhiteSpace(newTransactionTags) ? new List<string>() : newTransactionTags.Split(',').Select(tag => tag.Trim()).ToList(),
                Source = string.IsNullOrWhiteSpace(newTransactionSource) ? new List<string>() : newTransactionSource.Split(',').Select(source => source.Trim()).ToList(),
                Notes = newTransactionNotes,
                Date = DateTime.Now
            };

        Transactions.Add(newTransaction);
        TransactionService.SaveTransactions(Transactions);

        Message = "Transaction saved successfully!";
    }

    private void OnCancel()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}
