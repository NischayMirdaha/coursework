@page "/debt"
@using coursework.Models
@inject DebtService DebtService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
<section class="min-h-screen bg-gradient-to-r from-teal-700 via-blue-600 to-cyan-400 d-flex align-items-center justify-content-center p-6">
    <div class="w-full max-w-lg bg-white rounded-xl shadow-xl p-8 transform transition-all hover:scale-105 ease-in-out duration-300">
        <div class="text-center mb-6">
            <h2 class="text-3xl font-semibold text-teal-700">
                Add New Debt
            </h2>
            <p class="text-md text-teal-600">Fill out the details below for the new debt.</p>
        </div>

        <form @onsubmit="OnSaveDebt">
            <!-- Amount Input -->
            <div class="mb-4">
                <label class="text-teal-600 font-semibold" for="DebtAmount">Total Debt Amount</label>
                <input id="DebtAmount" type="number" class="form-control w-100 p-3 rounded-lg border-2 border-teal-500 text-gray-900 bg-teal-100 placeholder-gray-700 focus:outline-none focus:ring-2 focus:ring-teal-400 transition-all"
                       placeholder="Total Debt Amount" @bind="DebtAmount" required min="0" step="any" />
            </div>

            <!-- Paid Amount Input -->
            <div class="mb-4">
                <label class="text-teal-600 font-semibold" for="PaidAmount">Paid Amount</label>
                <input id="PaidAmount" type="number" class="form-control w-100 p-3 rounded-lg border-2 border-teal-500 text-gray-900 bg-teal-100 placeholder-gray-700 focus:outline-none focus:ring-2 focus:ring-teal-400 transition-all"
                       placeholder="Paid Amount" @bind="PaidAmount" min="0" step="any" />
            </div>

            <!-- Source Dropdown -->
            <div class="mb-4">
                <label class="text-teal-600 font-semibold" for="DebtSource">Select Source</label>
                <select id="DebtSource" class="form-select w-100 p-3 rounded-lg border-2 border-teal-500 text-gray-900 bg-teal-100 focus:outline-none focus:ring-2 focus:ring-teal-400 transition-all"
                        @bind="DebtSource">
                    <option disabled value="">Select Source</option>
                    <option value="bank">Bank</option>
                    <option value="cash">Cash</option>
                    <option value="online">Online</option>
                    <option value="other">Other</option>
                </select>
            </div>

            <!-- Debt Type Dropdown -->
            <div class="mb-4">
                <label class="text-teal-600 font-semibold" for="DebtType">Select Debt Type</label>
                <select id="DebtType" class="form-select w-100 p-3 rounded-lg border-2 border-teal-500 text-gray-900 bg-teal-100 focus:outline-none focus:ring-2 focus:ring-teal-400 transition-all"
                        @bind="DebtType">
                    <option disabled value="">Select Debt Type</option>
                    <option value="debtIn">Debt In</option>
                    <option value="debtOut">Debt Out</option>
                </select>
            </div>

            <!-- Due Date Input -->
            <div class="mb-4">
                <label class="text-teal-600 font-semibold" for="DueDate">Due Date</label>
                <input id="DueDate" type="date" class="form-control w-100 p-3 rounded-lg border-2 border-teal-500 text-gray-900 bg-teal-100 placeholder-gray-700 focus:outline-none focus:ring-2 focus:ring-teal-400 transition-all"
                       @bind="DueDate" required />
            </div>

            <!-- Notes Input -->
            <div class="mb-4">
                <label class="text-teal-600 font-semibold" for="DebtNotes">Notes</label>
                <textarea id="DebtNotes" class="form-control w-100 p-3 rounded-lg border-2 border-teal-500 text-gray-900 bg-teal-100 focus:outline-none focus:ring-2 focus:ring-teal-400 transition-all"
                          rows="3" placeholder="Notes" @bind="DebtNotes"></textarea>
            </div>

            <!-- Action Buttons -->
            <div class="d-flex justify-content-between align-items-center mt-4">
                <button type="submit" class="btn btn-success px-4 py-2 fw-semibold">Save Debt</button>
                <button type="button" class="btn btn-danger px-4 py-2 fw-semibold" @onclick="OnCancel">Cancel</button>
            </div>
        </form>

        <!-- Success/Error Message -->
        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="text-center text-lg mt-4 text-teal-400 font-medium">@Message</p>
        }
    </div>
</section>

@code {
    private decimal DebtAmount = 0;
    private decimal PaidAmount = 0;
    private DateTime DueDate = DateTime.Now; // Ensure DueDate is correctly initialized
    private string DebtSource = "";
    private string DebtNotes = "";
    private string Message = "";
    private DebtType DebtType = DebtType.debtIn; // Default to 'debtIn'

    private List<DebtModel> Debts = new();

    protected override void OnInitialized()
    {
        // Load existing debts from the DebtService
        Debts = DebtService.GetAllDebts();
    }

    private async Task OnSaveDebt()
    {
        // Retrieve the userId from localStorage
        var userIdString = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");

        if (string.IsNullOrEmpty(userIdString) || !int.TryParse(userIdString, out var userId))
        {
            Message = "Please log in. User ID not found.";
            return;
        }

        // Generate a unique Debt ID (Same logic as transaction ID)
        var newDebtId = Debts.Any() ? Debts.Max(d => d.Id) + 1 : 1;

        // Save the debt only if the form is valid
        if (DebtAmount <= 0 || string.IsNullOrWhiteSpace(DebtSource))
        {
            Message = "Amount required.";
            return;
        }

        // Create a new DebtModel
        var newDebt = new DebtModel
            {
                Id = newDebtId, // Assign the new unique Debt ID
                UserId = userId, // Associate the debt with the user
                Amount = DebtAmount,
                PaidAmount = PaidAmount,
                Source = DebtSource,
                Notes = DebtNotes,
                Date = DateTime.Now, // Current date as the creation date
                Type = DebtType // Assign the selected DebtType
            };

        // Save the new debt using DebtService
        Debts.Add(newDebt); // Add the new debt to the local list
        DebtService.SaveDebts(Debts); // Save the updated list of debts

        Message = "Debt saved successfully.";

        // Optionally reset the form or redirect
        DebtAmount = 0;
        PaidAmount = 0;
        DebtSource = "";
        DebtNotes = "";
    }

    private void OnCancel()
    {
        // Reload the current page
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}


