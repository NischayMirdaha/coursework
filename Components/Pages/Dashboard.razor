@page "/dashboard"
@using coursework.Models
@inject NavigationManager NavigationManager
@inject TransactionService TransactionService
@inject DebtService DebtService
@inject IJSRuntime JSRuntime

<div class="main-content container py-5" style="background-color: #121212; color:#e0f7fa;">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div class="d-flex align-items-center">
            <div id="currentDate" class="date-display text-muted fs-5">
                @DateTime.Now.ToString("MMMM dd, yyyy")
            </div>
        </div>

        <div class="d-flex align-items-center">
            <button @onclick="Logout" class="btn btn-outline-danger logout-btn rounded-pill px-4">Logout</button>
        </div>
    </div>
     
    <div class="row g-4">
        <!-- Total Wealth -->
        <div class="col-md-4">
            <div class="card summary-card bg-primary text-white shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Total Wealth</h6>
                    <p class="display-6 fw-bold">@TotalWealth</p>
                </div>
            </div>
        </div>

        <!-- Total Outflows -->
        <div class="col-md-4">
            <div class="card summary-card bg-danger text-white shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Total Outflows</h6>
                    <p class="display-6 fw-bold">@TotalOutflows</p>
                </div>
            </div>
        </div>

        <!-- Total Inflows -->
        <div class="col-md-4">
            <div class="card summary-card bg-success text-white shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Total Inflows</h6>
                    <p class="display-6 fw-bold">@TotalEarnings</p>
                </div>
            </div>
        </div>

        <!-- Net Balance -->
        <div class="col-md-4">
            <div class="card summary-card bg-info text-white shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Net Balance</h6>
                    <p class="display-6 fw-bold">@TotalWealth</p>
                </div>
            </div>
        </div>

        <!-- Total Transactions -->
        <div class="col-md-4">
            <div class="card summary-card bg-secondary text-white shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Total Transactions</h6>
                    <p class="display-6 fw-bold">@TotalTransactions</p>
                </div>
            </div>
        </div>

        <!-- Total Transaction Value -->
        <div class="col-md-4">
            <div class="card summary-card bg-warning text-dark shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Total Transaction Value</h6>
                    <p class="display-6 fw-bold">@TotalTransactionValue</p>
                </div>
            </div>
        </div>

        <!-- Highest Inflow -->
        <div class="col-md-4">
            <div class="card summary-card bg-success text-white shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Highest Inflow</h6>
                    @if (HigInflow != null)
                    {
                        <p class="display-6 fw-bold">@HigInflow.Amount</p>
                        <small>@HigInflow.Date.ToString("MMMM dd, yyyy")</small>
                        <br />
                        <small>@HigInflow.Type</small>
                    }
                    else
                    {
                        <p>No data available</p>
                    }
                </div>
            </div>
        </div>

        <!-- Lowest Inflow -->
        <div class="col-md-4">
            <div class="card summary-card bg-danger text-white shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Lowest Inflow</h6>
                    @if (LowInflow != null)
                    {
                        <p class="display-6 fw-bold">@LowInflow.Amount</p>
                        <small>@LowInflow.Date.ToString("MMMM dd, yyyy")</small>
                        <br />
                        <small>@LowInflow.Type</small>
                    }
                    else
                    {
                        <p>No data available</p>
                    }
                </div>
            </div>
        </div>

        <!-- Highest Outflow -->
        <div class="col-md-4">
            <div class="card summary-card bg-warning text-dark shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Highest Outflow</h6>
                    @if (HigOutflow != null)
                    {
                        <p class="display-6 fw-bold">@HigOutflow.Amount</p>
                        <small>@HigOutflow.Date.ToString("MMMM dd, yyyy")</small>
                        <br />
                    }
                    else
                    {
                        <p>No data available</p>
                    }
                </div>
            </div>
        </div>

        <!-- Low Outflow -->
        <div class="col-md-4">
            <div class="card summary-card bg-info text-white shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Low Outflow</h6>
                    @if (LowOutflow != null)
                    {
                        <p class="display-6 fw-bold">@LowOutflow.Amount</p>
                        <small>@LowOutflow.Date.ToString("MMMM dd, yyyy")</small>
                        <br />
                        <small>@LowOutflow.Type</small>
                    }
                    else
                    {
                        <p>No data available</p>
                    }
                </div>
            </div>
        </div>

        <!-- Highest Debt -->
        <div class="col-md-4">
            <div class="card summary-card bg-dark text-white shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Highest Debt</h6>
                    @if (HighDebt != null)
                    {
                        <p class="display-6 fw-bold">@HighDebt.Amount</p>
                        <small>@HighDebt.Date.ToString("MMMM dd, yyyy")</small>
                        <br />
                    }
                    else
                    {
                        <p>No data available</p>
                    }
                </div>
            </div>
        </div>

        <!-- Lowest Debt -->
        <div class="col-md-4">
            <div class="card summary-card bg-dark text-white shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Lowest Debt</h6>
                    @if (LowDebt != null)
                    {
                        <p class="display-6 fw-bold">@LowDebt.Amount</p>
                        <small>@LowDebt.Date.ToString("MMMM dd, yyyy")</small>
                        <br />
                    }
                    else
                    {
                        <p>No data available</p>
                    }
                </div>
            </div>
        </div>

        <!-- Cleared Debt -->
        <div class="col-md-4">
            <div class="card summary-card bg-success text-white shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Cleared Debt</h6>
                    <p class="display-6 fw-bold">@ClearDebt</p>
                </div>
            </div>
        </div>

        <!-- Remaining Debt -->
        <div class="col-md-4">
            <div class="card summary-card bg-danger text-white shadow-lg border-0 rounded-3">
                <div class="card-body text-center">
                    <h6 class="text-uppercase">Remaining Debt</h6>
                    <p class="display-6 fw-bold">@RemainingDebt</p>
                </div>
            </div>
        </div>
    </div>

    <!-- Pending Debts Section -->
    <div class="row mt-5">
        <div class="col-12">
            <h3 class="text-muted mb-4">Pending Debts</h3>
            @if (PendingDebts?.Any() ?? false)
            {
                <ul class="list-group list-group-flush">
                    @foreach (var debt in PendingDebts)
                    {
                        <li class="list-group-item d-flex justify-content-between align-items-center bg-dark text-white border rounded-pill mb-2">
                            <span><strong>Debt Amount:</strong> @debt.Amount</span>
                            <span><strong>Due Date:</strong> @debt.DueDate.ToString("MMMM dd, yyyy")</span>
                        </li>
                    }
                </ul>
            }
            else
            {
                <p>No pending debts available.</p>
            }
        </div>
    </div>

    <div class="mt-5">
        <!-- Date Range Filter -->
        <div class="row mb-3">
            <div class="col-12">
                <h5>Filter by Date Range</h5>
                <div class="input-group">
                    <input type="date" class="form-control" @bind="StartDate" />
                    <input type="date" class="form-control" @bind="EndDate" />
                    <button @onclick="FilterTransactionByDate" class="btn btn-primary">Apply Date Filter</button>
                </div>
            </div>
        </div>

        <h3>Filtered Transactions</h3>
        <ul class="transaction-list">
            @if (FilteredItems?.Any() ?? false)
            {
                @foreach (var transaction in FilteredItems)
                {
                    <li class="transaction-item">
                        <span>
                            @transaction.Date.ToString("MMMM dd, yyyy") - @transaction.Type -
                            @string.Join(", ", transaction.Tags ?? new List<string>()) -
                            @transaction.Amount
                        </span>
                    </li>
                }
            }
            else
            {
                <p>No transactions found matching the criteria.</p>
            }
        </ul>
    </div>



</div>


@code {
    private decimal TotalEarnings = 0;
    private decimal TotalOutflows = 0;
    private decimal TotalWealth = 0;
    private decimal TotalTransactions = 0;
    private decimal TotalTransactionValue = 0;
    private DateTime StartDate = DateTime.Now.AddMonths(-1); // Default to last month
    private DateTime EndDate = DateTime.Now;
    private List<TransactionModel> FilteredItems = new();
    private TransactionModel HigInflow;
    private TransactionModel LowInflow;
    private TransactionModel HigOutflow;
    private TransactionModel LowOutflow;
    private DebtModel HighDebt;
    private DebtModel LowDebt;
    private decimal ClearDebt = 0;
    private decimal RemainingDebt = 0;
    private List<DebtModel> PendingDebts = new();

    protected override async Task OnInitializedAsync()
    {
        try
        {

            var userId = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId");

            if (string.IsNullOrEmpty(userId))
            {
                NavigationManager.NavigateTo("/login");
                return;
            }

            var id = int.Parse(userId);

            // Fetch total earnings, outflows, and other statistics
            TotalEarnings = TransactionService.CalculateTotalIncome(id);
            TotalOutflows = TransactionService.CalculateTotalExpenses(id);
            TotalWealth = TotalEarnings - TotalOutflows;

            // Get total transactions and total transaction value
            TotalTransactions = TransactionService.GetTotalTransactions(id);
            TotalTransactionValue = TransactionService.GetUserTransactions(id).Sum(t => t.Amount);

            // Fetch highest and lowest inflow
            HigInflow = TransactionService.GetHighIncome(id);
            LowInflow = TransactionService.GetLowIncome(id);

            // Fetch highest and lowest outflow
            HigOutflow = TransactionService.GetHighExpense(id);
            LowOutflow = TransactionService.GetLowExpense(id);

            // Calculate debt information
            ClearDebt = DebtService.CalClearedDebt(id);
            RemainingDebt = DebtService.CalRemainingDebt(id);

            // Fetch highest and lowest debts
            HighDebt = DebtService.GetHighDebt(id);
            LowDebt = DebtService.GetLowDebt(id);

            // Load all transactions initially
            FilteredItems = TransactionService.GetUserTransactions(id);

            // Fetch pending debts for the user
            PendingDebts = DebtService.GetPendingDebts(id);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing dashboard: {ex.Message}");
        }
    }

    private void FilterTransactionByDate()
    {
        var userId = int.Parse(JSRuntime.InvokeAsync<string>("localStorage.getItem", "userId").Result);

        // Filter the transactions based on the selected date range
        FilteredItems = TransactionService
            .GetUserTransactions(userId)
            .Where(t => t.Date >= StartDate && t.Date <= EndDate)
            .ToList();

        // Ensure UI updates after the filter is applied
        StateHasChanged();
    }

    private void Logout()
    {
        JSRuntime.InvokeVoidAsync("localStorage.removeItem", "userId");
        NavigationManager.NavigateTo("/login");
    }
}
